{"version":3,"sources":["styles/index.ts","index.tsx","containers/pages/index.tsx","reportWebVitals.ts","containers/index.tsx"],"names":["Wrapper","styled","div","height","width","Inner","Selected","isVertical","index","length","Select","select","ReactThreeToggle","forwardRef","ref","className","selectedClassName","undefined","wrapperClassName","initialValue","isWrap","name","onChange","style","selectedStyle","wrapperStyle","values","uniqueValues","useMemo","map","v","id","nanoid","label","value","useState","findIndex","currentIndex","setCurrentIndex","currentLabel","currentValue","options","handleChange","useCallback","enabledTouch","setEnabledTouch","wrap","setWrap","callback","prevIndex","nextIndex","handleClick","handleTouchStart","useEffect","hasSupport","detectTouchEvents","useDidUpdate","onClick","onTouchStart","Pages","values1","values2","console","log","background","borderRadius","color","fontSize","lineHeight","textAlign","transition","border","padding","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8038300.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport type WrapperProps = {\n  height: number;\n  width: number;\n};\n\nexport const Wrapper = styled.div<WrapperProps>`\n  border: 1px solid #ccc;\n  border-radius: ${({ height }) => `${height}px`};\n  box-sizing: content-box;\n  cursor: pointer;\n  height: ${({ height }) => `${height}px`};\n  padding: 4px;\n  width: ${({ width }) => `${width}px`};\n`;\n\nexport const Inner = styled.div`\n  height: 100%;\n  position: relative;\n  width: 100%;\n`;\n\nexport type SelectedProps = {\n  height: number;\n  index: number;\n  isVertical?: boolean;\n  length: number;\n  width: number;\n};\n\nexport const Selected = styled.div<SelectedProps>`\n  background: #aaa;\n  border-radius: 50%;\n  height: ${({ height, isVertical, width }) =>\n    `${isVertical ? width : height}px`};\n  left: ${({ height, index, isVertical, length }) =>\n    !index || isVertical\n      ? 0\n      : `calc(((100% - ${height}px) / ${length - 1}) * ${index})`};\n  position: absolute;\n  transition: 100ms;\n  top: ${({ index, isVertical, length, width }) =>\n    isVertical ? `calc(((100% - ${width}px) / ${length - 1}) * ${index})` : 0};\n  width: ${({ height, isVertical, width }) =>\n    `${isVertical ? width : height}px`};\n`;\n\nexport const Select = styled.select`\n  display: none;\n`;\n","import React, {\n  CSSProperties,\n  FC,\n  forwardRef,\n  ReactNode,\n  Ref,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { nanoid } from \"nanoid\";\nimport {\n  Inner,\n  Select,\n  Selected,\n  SelectedProps,\n  Wrapper,\n  WrapperProps,\n} from \"./styles\";\nimport detectTouchEvents from \"detect-touch-events\";\nimport useDidUpdate from \"@rooks/use-did-update\";\n\ntype Value =\n  | string\n  | {\n      label: ReactNode;\n      value: string;\n    };\n\nexport type ReactThreeToggleProps = Partial<\n  Pick<WrapperProps, \"height\" | \"width\">\n> &\n  Partial<Pick<SelectedProps, \"height\" | \"isVertical\" | \"width\">> & {\n    className?: Partial<\n      Record<\"selectedClassName\" | \"wrapperClassName\", string>\n    >;\n    initialValue?: string;\n    isWrap?: boolean;\n    name?: string;\n    onChange?: (value: Value) => void;\n    ref?: Ref<HTMLSelectElement>;\n    style?: Partial<Record<\"selectedStyle\" | \"wrapperStyle\", CSSProperties>>;\n    values: Value[];\n  };\n\nconst ReactThreeToggle: FC<ReactThreeToggleProps> = forwardRef<\n  HTMLSelectElement,\n  Omit<ReactThreeToggleProps, \"ref\">\n>(\n  (\n    {\n      className: { selectedClassName, wrapperClassName } = {\n        selectedClassName: undefined,\n        wrapperClassName: undefined,\n      },\n      height = 16,\n      initialValue,\n      isVertical,\n      isWrap,\n      name,\n      onChange,\n      style: { selectedStyle, wrapperStyle } = {\n        selectedStyle: undefined,\n        wrapperStyle: undefined,\n      },\n      values,\n      width = 48,\n    },\n    ref\n  ) => {\n    const uniqueValues = useMemo(\n      () =>\n        values.map((v) =>\n          typeof v === \"string\"\n            ? {\n                id: nanoid(),\n                label: null,\n                value: v,\n              }\n            : {\n                ...v,\n                id: nanoid(),\n              }\n        ),\n      [values]\n    );\n    const [currentIndex, setCurrentIndex] = useState(() => {\n      if (typeof initialValue === \"undefined\") {\n        return 0;\n      }\n\n      return uniqueValues.findIndex(({ value }) => initialValue === value) || 0;\n    });\n    const currentLabel = useMemo(() => {\n      const { label } = uniqueValues[currentIndex];\n\n      return label;\n    }, [currentIndex, uniqueValues]);\n    const currentValue = useMemo(() => {\n      const { value } = uniqueValues[currentIndex];\n\n      return value;\n    }, [currentIndex, uniqueValues]);\n    const options = useMemo(\n      () =>\n        uniqueValues.map(({ id, value }) => <option key={id} value={value} />),\n      [uniqueValues]\n    );\n    const handleChange = useCallback(() => {}, []);\n    const [enabledTouch, setEnabledTouch] = useState(false);\n    const [wrap, setWrap] = useState(false);\n    const callback = useCallback(() => {\n      setCurrentIndex((prevIndex) => {\n        if (isWrap) {\n          return wrap ? prevIndex - 1 : prevIndex + 1;\n        }\n\n        const nextIndex = prevIndex + 1;\n\n        return nextIndex === uniqueValues.length ? 0 : nextIndex;\n      });\n    }, [isWrap, uniqueValues.length, wrap]);\n    const handleClick = useCallback(() => {\n      if (enabledTouch) {\n        return;\n      }\n\n      callback();\n    }, [callback, enabledTouch]);\n    const handleTouchStart = useCallback(() => {\n      if (!enabledTouch) {\n        return;\n      }\n\n      callback();\n    }, [callback, enabledTouch]);\n    const length = useMemo(() => uniqueValues.length, [uniqueValues.length]);\n\n    useEffect(() => {\n      const { hasSupport } = detectTouchEvents;\n\n      setEnabledTouch(!!hasSupport);\n    }, []);\n\n    useEffect(() => {\n      if (currentIndex !== 0 && currentIndex !== uniqueValues.length - 1) {\n        return;\n      }\n\n      setWrap(currentIndex === uniqueValues.length - 1);\n    }, [currentIndex, uniqueValues.length]);\n\n    useDidUpdate(() => {\n      if (!onChange) {\n        return;\n      }\n\n      const currentValue = values[currentIndex];\n\n      onChange(currentValue);\n    }, [currentIndex, onChange, values]);\n\n    return (\n      <>\n        <Wrapper\n          className={wrapperClassName}\n          height={height}\n          onClick={handleClick}\n          onTouchStart={handleTouchStart}\n          style={wrapperStyle}\n          width={width}\n        >\n          <Inner>\n            <Selected\n              className={selectedClassName}\n              height={height}\n              index={currentIndex}\n              isVertical={isVertical}\n              length={length}\n              style={selectedStyle}\n              width={width}\n            >\n              {currentLabel}\n            </Selected>\n          </Inner>\n        </Wrapper>\n        <Select\n          name={name}\n          onChange={handleChange}\n          ref={ref}\n          value={currentValue}\n        >\n          {options}\n        </Select>\n      </>\n    );\n  }\n);\n\nexport default ReactThreeToggle;\n","import React, { FC, useCallback, useMemo } from \"react\";\nimport ReactThreeToggle, { ReactThreeToggleProps } from \"index\";\n\nconst Pages: FC = () => {\n  const values1 = useMemo(() => [\"hoge\", \"fuga\", \"piyo\"], []);\n  const values2 = useMemo(\n    () => [\n      { label: \"hoge\", value: \"hoge\" },\n      { label: \"fuga\", value: \"fuga\" },\n      { label: \"piyo\", value: \"piyo\" },\n      { label: \"moge\", value: \"moge\" },\n    ],\n    []\n  );\n  const handleChange = useCallback<\n    NonNullable<ReactThreeToggleProps[\"onChange\"]>\n  >((value) => {\n    console.log(value);\n  }, []);\n\n  return (\n    <div>\n      <h1>react-three-toggle</h1>\n      <article>\n        <h2>Simple</h2>\n        <ReactThreeToggle values={values1} />\n      </article>\n      <hr />\n      <article>\n        <h2>Full Customize</h2>\n        <ReactThreeToggle\n          className={{\n            selectedClassName: \"moge1\",\n            wrapperClassName: \"moge2\",\n          }}\n          height={96}\n          onChange={handleChange}\n          initialValue=\"piyo\"\n          isVertical={true}\n          isWrap={true}\n          style={{\n            selectedStyle: {\n              background: \"red\",\n              borderRadius: 0,\n              color: \"white\",\n              fontSize: \"12px\",\n              lineHeight: \"32px\",\n              textAlign: \"center\",\n              transition: \"250ms\",\n            },\n            wrapperStyle: {\n              background: \"pink\",\n              border: \"none\",\n              borderRadius: 0,\n              padding: 0,\n            },\n          }}\n          values={values2}\n          width={32}\n        />\n      </article>\n    </div>\n  );\n};\n\nexport default Pages;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Pages from \"containers/pages\";\nimport React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"../reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <Pages />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}