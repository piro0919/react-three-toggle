{"version":3,"sources":["styles/index.ts","index.tsx","containers/pages/index.tsx","reportWebVitals.ts","containers/index.tsx"],"names":["Wrapper","styled","div","height","width","Inner","Selected","isVertical","selected","Select","select","ReactThreeToggle","forwardRef","ref","className","selectedClassName","undefined","wrapperClassName","initialValue","isWrap","name","onChange","style","selectedStyle","wrapperStyle","values","optionValues","useMemo","map","v","value","useState","setValue","wrap","setWrap","handleClick","useCallback","prevValue","index","findIndex","options","handleChange","selectedNode","foundValue","find","label","useEffect","useDidUpdate","currentValue","onClick","Pages","values1","values2","console","log","background","borderRadius","color","fontSize","lineHeight","textAlign","transition","border","padding","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57c83fac.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport type WrapperProps = {\n  height: number;\n  width: number;\n};\n\nexport const Wrapper = styled.div<WrapperProps>`\n  border: 1px solid #ccc;\n  border-radius: ${({ height }) => `${height}px`};\n  cursor: pointer;\n  height: ${({ height }) => `${height}px`};\n  padding: 4px;\n  width: ${({ width }) => `${width}px`};\n`;\n\nexport const Inner = styled.div`\n  height: 100%;\n  position: relative;\n  width: 100%;\n`;\n\nexport type SelectedProps = {\n  height: number;\n  isVertical?: boolean;\n  selected: \"first\" | \"second\" | \"third\";\n  width: number;\n};\n\nexport const Selected = styled.div<SelectedProps>`\n  background: #aaa;\n  border-radius: 50%;\n  height: ${({ height, isVertical, width }) =>\n    `${isVertical ? width : height}px`};\n  left: ${({ height, isVertical, selected }) =>\n    isVertical\n      ? 0\n      : selected === \"first\"\n      ? 0\n      : `calc((100% - ${height}px) / ${selected === \"second\" ? 2 : 1})`};\n  position: absolute;\n  transition: 100ms;\n  top: ${({ isVertical, selected, width }) =>\n    isVertical\n      ? selected === \"first\"\n        ? 0\n        : `calc((100% - ${width}px) / ${selected === \"second\" ? 2 : 1})`\n      : 0};\n  width: ${({ height, isVertical, width }) =>\n    `${isVertical ? width : height}px`};\n`;\n\nexport const Select = styled.select`\n  display: none;\n`;\n","import React, {\n  CSSProperties,\n  FC,\n  forwardRef,\n  ReactNode,\n  Ref,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport useDidUpdate from \"@rooks/use-did-update\";\nimport {\n  Inner,\n  Select,\n  Selected,\n  SelectedProps,\n  Wrapper,\n  WrapperProps,\n} from \"./styles\";\n\ntype Value =\n  | string\n  | {\n      label: ReactNode;\n      value: string;\n    };\n\nexport type ReactThreeToggleProps = Partial<\n  Pick<WrapperProps, \"height\" | \"width\">\n> &\n  Partial<Pick<SelectedProps, \"height\" | \"isVertical\" | \"width\">> & {\n    className?: Partial<\n      Record<\"selectedClassName\" | \"wrapperClassName\", string>\n    >;\n    initialValue?: string;\n    isWrap?: boolean;\n    name?: string;\n    onChange?: (value: Value) => void;\n    ref?: Ref<HTMLSelectElement>;\n    style?: Partial<Record<\"selectedStyle\" | \"wrapperStyle\", CSSProperties>>;\n    values: Value[];\n  };\n\nconst ReactThreeToggle: FC<ReactThreeToggleProps> = forwardRef<\n  HTMLSelectElement,\n  Omit<ReactThreeToggleProps, \"ref\">\n>(\n  (\n    {\n      className: { selectedClassName, wrapperClassName } = {\n        selectedClassName: undefined,\n        wrapperClassName: undefined,\n      },\n      height = 16,\n      initialValue,\n      isVertical,\n      isWrap,\n      name,\n      onChange,\n      style: { selectedStyle, wrapperStyle } = {\n        selectedStyle: undefined,\n        wrapperStyle: undefined,\n      },\n      values,\n      width = 48,\n    },\n    ref\n  ) => {\n    const optionValues = useMemo(\n      () =>\n        values.map((v) => {\n          return typeof v === \"string\" ? v : v.value;\n        }),\n      [values]\n    );\n    const [value, setValue] = useState(initialValue || optionValues[0]);\n    const [wrap, setWrap] = useState(false);\n    const handleClick = useCallback(() => {\n      setValue((prevValue) => {\n        const index = optionValues.findIndex((value) => prevValue === value);\n\n        let value = prevValue;\n\n        if (isWrap) {\n          if (index === 0 || index === 2) {\n            value = optionValues[1];\n          } else {\n            value = optionValues[wrap ? 0 : 2];\n          }\n        } else {\n          value = optionValues[index === 2 ? 0 : index + 1];\n        }\n\n        return value;\n      });\n    }, [isWrap, optionValues, wrap]);\n    const options = useMemo(\n      () =>\n        values.map((v) =>\n          typeof v === \"string\" ? (\n            <option key={v} value={v} />\n          ) : (\n            <option key={v.value} value={v.value} />\n          )\n        ),\n      [values]\n    );\n    const selected = useMemo<\"first\" | \"second\" | \"third\">(() => {\n      const index = optionValues.findIndex((v) => value === v);\n\n      return [\"first\" as const, \"second\" as const, \"third\" as const][index];\n    }, [optionValues, value]);\n    const handleChange = useCallback(() => {}, []);\n    const selectedNode = useMemo(() => {\n      const foundValue = values.find(\n        (v) => value === (typeof v === \"string\" ? v : v.value)\n      );\n\n      if (!foundValue) {\n        return;\n      }\n\n      return (\n        <Selected\n          className={selectedClassName}\n          height={height}\n          isVertical={isVertical}\n          selected={selected}\n          style={selectedStyle}\n          width={width}\n        >\n          {typeof foundValue === \"string\" ? null : foundValue.label}\n        </Selected>\n      );\n    }, [\n      height,\n      isVertical,\n      selected,\n      selectedClassName,\n      selectedStyle,\n      value,\n      values,\n      width,\n    ]);\n\n    useEffect(() => {\n      if (selected !== \"first\" && selected !== \"third\") {\n        return;\n      }\n\n      setWrap(selected === \"third\");\n    }, [selected]);\n\n    useDidUpdate(() => {\n      if (!onChange) {\n        return;\n      }\n\n      const currentValue = values.find((v) =>\n        typeof v === \"string\" ? value === v : value === v.value\n      );\n\n      if (!currentValue) {\n        return;\n      }\n\n      onChange(currentValue);\n    }, [onChange, value]);\n\n    return (\n      <Wrapper\n        className={wrapperClassName}\n        height={height}\n        onClick={handleClick}\n        style={wrapperStyle}\n        width={width}\n      >\n        <Inner>{selectedNode}</Inner>\n        <Select name={name} onChange={handleChange} ref={ref} value={value}>\n          {options}\n        </Select>\n      </Wrapper>\n    );\n  }\n);\n\nexport default ReactThreeToggle;\n","import React, { FC, useCallback, useMemo } from \"react\";\nimport ReactThreeToggle, { ReactThreeToggleProps } from \"index\";\n\nconst Pages: FC = () => {\n  const values1 = useMemo(() => [\"hoge\", \"fuga\", \"piyo\"], []);\n  const values2 = useMemo(\n    () => [\n      { label: \"hoge\", value: \"hoge\" },\n      { label: \"fuga\", value: \"fuga\" },\n      { label: \"piyo\", value: \"piyo\" },\n    ],\n    []\n  );\n  const handleChange = useCallback<\n    NonNullable<ReactThreeToggleProps[\"onChange\"]>\n  >((value) => {\n    console.log(value);\n  }, []);\n\n  return (\n    <div>\n      <h1>react-three-toggle</h1>\n      <article>\n        <h2>Simple</h2>\n        <ReactThreeToggle values={values1} />\n      </article>\n      <hr />\n      <article>\n        <h2>Full Customize</h2>\n        <ReactThreeToggle\n          className={{\n            selectedClassName: \"moge1\",\n            wrapperClassName: \"moge2\",\n          }}\n          height={96}\n          onChange={handleChange}\n          initialValue=\"piyo\"\n          isVertical={true}\n          isWrap={true}\n          style={{\n            selectedStyle: {\n              background: \"red\",\n              borderRadius: 0,\n              color: \"white\",\n              fontSize: \"12px\",\n              lineHeight: \"32px\",\n              textAlign: \"center\",\n              transition: \"250ms\",\n            },\n            wrapperStyle: {\n              background: \"pink\",\n              border: \"none\",\n              borderRadius: 0,\n              padding: 0,\n            },\n          }}\n          values={values2}\n          width={32}\n        />\n      </article>\n    </div>\n  );\n};\n\nexport default Pages;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import Pages from \"containers/pages\";\nimport React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"../reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <Pages />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}